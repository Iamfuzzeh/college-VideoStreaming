// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Portal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SD2;

public class StreamInfo implements java.lang.Cloneable, java.io.Serializable
{
    public String name;

    public Endpoint endp;

    public String videosize;

    public String bitrate;

    public String[] keywords;

    public StreamInfo()
    {
    }

    public StreamInfo(String name, Endpoint endp, String videosize, String bitrate, String[] keywords)
    {
        this.name = name;
        this.endp = endp;
        this.videosize = videosize;
        this.bitrate = bitrate;
        this.keywords = keywords;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        StreamInfo _r = null;
        if(rhs instanceof StreamInfo)
        {
            _r = (StreamInfo)rhs;
        }

        if(_r != null)
        {
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(endp != _r.endp)
            {
                if(endp == null || _r.endp == null || !endp.equals(_r.endp))
                {
                    return false;
                }
            }
            if(videosize != _r.videosize)
            {
                if(videosize == null || _r.videosize == null || !videosize.equals(_r.videosize))
                {
                    return false;
                }
            }
            if(bitrate != _r.bitrate)
            {
                if(bitrate == null || _r.bitrate == null || !bitrate.equals(_r.bitrate))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(keywords, _r.keywords))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::SD2::StreamInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, endp);
        __h = IceInternal.HashUtil.hashAdd(__h, videosize);
        __h = IceInternal.HashUtil.hashAdd(__h, bitrate);
        __h = IceInternal.HashUtil.hashAdd(__h, keywords);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(name);
        endp.__write(__os);
        __os.writeString(videosize);
        __os.writeString(bitrate);
        ListHelper.write(__os, keywords);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        name = __is.readString();
        endp = new Endpoint();
        endp.__read(__is);
        videosize = __is.readString();
        bitrate = __is.readString();
        keywords = ListHelper.read(__is);
    }

    public static final long serialVersionUID = 356232022284303840L;
}
